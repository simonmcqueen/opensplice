/*
 *  DDSTouchStone: a scenario-driven Open Source benchmarking framework
 *  for evaluating the performance of OMG DDS compliant implementations.
 *
 *  Copyright (C) 2008-2009 PrismTech Ltd.
 *  ddstouchstone@prismtech.com
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License Version 3 dated 29 June 2007, as published by the
 *  Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with DDSTouchStone; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */


module DDSTouchStone
{
    struct Duration {
        long sec;
        unsigned long nanosec;
    };

    enum DurabilityQosPolicyKind {
        VOLATILE_DURABILITY_QOS,
        TRANSIENT_LOCAL_DURABILITY_QOS,
        TRANSIENT_DURABILITY_QOS,
        PERSISTENT_DURABILITY_QOS
    };

    struct DurabilityQosPolicy {
        DurabilityQosPolicyKind kind;
    };

    struct DeadlineQosPolicy {
        Duration period;
    };

    struct LatencyBudgetQosPolicy {
        Duration duration;
    };
    enum LivelinessQosPolicyKind {
        AUTOMATIC_LIVELINESS_QOS,
        MANUAL_BY_PARTICIPANT_LIVELINESS_QOS,
        MANUAL_BY_TOPIC_LIVELINESS_QOS
    };

    struct LivelinessQosPolicy {
        LivelinessQosPolicyKind kind;
        Duration lease_duration;
    };

    enum ReliabilityQosPolicyKind {
        BEST_EFFORT_RELIABILITY_QOS,
        RELIABLE_RELIABILITY_QOS
    };

    struct ReliabilityQosPolicy {
        ReliabilityQosPolicyKind kind;
        Duration max_blocking_time;
    };

    enum DestinationOrderQosPolicyKind {
        BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS,
        BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS
    };

    struct DestinationOrderQosPolicy {
        DestinationOrderQosPolicyKind kind;
    };

    enum HistoryQosPolicyKind {
        KEEP_LAST_HISTORY_QOS,
        KEEP_ALL_HISTORY_QOS
    };

    struct HistoryQosPolicy {
        // HistoryQosPolicyKind kind; /* For now: KEEP_LAST only */
        long depth;
    };

    struct ResourceLimitsQosPolicy {
        long max_samples;
        long max_instances;
        long max_samples_per_instance;
    };

    struct WriterDataLifecycleQosPolicy {
        boolean autodispose_unregistered_instances;
    };

    struct ReaderDataLifecycleQosPolicy {
        Duration autopurge_nowriter_samples_delay;
        Duration autopurge_disposed_samples_delay;
    };

    typedef sequence<octet> octSeq;

    struct UserDataQosPolicy {
        octSeq value;
    };

    struct LifespanQosPolicy {
        Duration duration;
    };

    struct OwnershipStrengthQosPolicy {
        long value;
    };

    struct TransportPriorityQosPolicy {
        long value;
    };

    struct TimeBasedFilterQosPolicy {
        Duration minimum_separation;
    };

    struct DataWriterQos
    {
//        DurabilityQosPolicy          durability;
//        DeadlineQosPolicy            deadline;
        LatencyBudgetQosPolicy       latency_budget;
//        LivelinessQosPolicy          liveliness;
//        ReliabilityQosPolicy         reliability;
//        DestinationOrderQosPolicy    destination_order;
//        HistoryQosPolicy             history;
//        ResourceLimitsQosPolicy      resource_limits;
        TransportPriorityQosPolicy   transport_priority;
//        LifespanQosPolicy            lifespan;
//        UserDataQosPolicy            user_data;
//        OwnershipStrengthQosPolicy   ownership_strength;
//        WriterDataLifecycleQosPolicy writer_data_lifecycle;
    };

    struct DataReaderQos
    {
//        DurabilityQosPolicy          durability;
//        DeadlineQosPolicy            deadline;
        LatencyBudgetQosPolicy       latency_budget;
//        LivelinessQosPolicy          liveliness;
//        ReliabilityQosPolicy         reliability;
//        DestinationOrderQosPolicy    destination_order;
        HistoryQosPolicy             history;
//        ResourceLimitsQosPolicy      resource_limits;
//        UserDataQosPolicy            user_data;
//        TimeBasedFilterQosPolicy     time_based_filter;
//        ReaderDataLifecycleQosPolicy reader_data_lifecycle;
    };

    typedef sequence<char> message;
    typedef sequence<char> payload;
    typedef unsigned long  msec_t;
    typedef double timestamp;
    typedef double usec_duration;

    enum TopicKind {
        BEST_EFFORT,
        RELIABLE,
        TRANSIENT,
        PERSISTENT
    };

    enum SchedulingClass {
        TIMESHARING, REALTIME
    };

    struct throughput_message
    {
        unsigned long instance_id;
        unsigned long random_id;
        unsigned long application_id;
        unsigned long transmitter_id;
        unsigned long sequence_number;
        unsigned long config_number;
        usec_duration creation_duration;
        timestamp     creation_time;
        timestamp     write_timestamp;
        payload       payload_data;
    };
#pragma keylist throughput_message instance_id random_id

    struct latency_message
    {
        unsigned long application_id;
        unsigned long transceiver_id;
        unsigned long random_id;
        unsigned long sequence_number;
        unsigned long config_number;
        timestamp     write_timestamp;
        timestamp     echo_timestamp;
        usec_duration source_latency;
        usec_duration arrival_latency;
        usec_duration send_latency;
        payload       payload_data;
    };
#pragma keylist latency_message application_id transceiver_id random_id

    struct transmitterDef
    {
        unsigned long   group_id;
        unsigned long   transmitter_id;
        unsigned long   partition_id;
        unsigned long   topic_id;
        TopicKind       topic_kind;
        SchedulingClass scheduling_class;
        long            thread_priority;
        unsigned long   message_size;
        unsigned long   messages_per_burst;
        msec_t          burst_period;
    };
#pragma keylist transmitterDef group_id transmitter_id partition_id

    struct transmitterQos
    {
        unsigned long group_id;
        unsigned long transmitter_id;
        unsigned long partition_id;
        DataWriterQos qos;
    };
#pragma keylist transmitterQos group_id transmitter_id partition_id

    struct receiverDef
    {
        unsigned long   group_id;
        unsigned long   receiver_id;
        unsigned long   partition_id;
        unsigned long   topic_id;
        TopicKind       topic_kind;
        SchedulingClass scheduling_class;
        long            thread_priority;
        msec_t          report_period;
        msec_t          polling_period;
    };
#pragma keylist receiverDef group_id receiver_id partition_id

    struct receiverQos
    {
        unsigned long group_id;
        unsigned long receiver_id;
        unsigned long partition_id;
        DataReaderQos qos;
    };
#pragma keylist receiverQos group_id receiver_id partition_id

    struct transceiverDef
    {
        unsigned long   group_id;
        unsigned long   transceiver_id;
        unsigned long   partition_id;
        unsigned long   topic_id;
        TopicKind       topic_kind;
        SchedulingClass scheduling_class;
        long            thread_priority;
        unsigned long   message_size;
        msec_t          write_period;
        msec_t          report_period;
    };
#pragma keylist transceiverDef group_id transceiver_id partition_id

    struct transceiverQos
    {
        unsigned long group_id;
        unsigned long transceiver_id;
        unsigned long partition_id;
        DataWriterQos writer_qos;
        DataReaderQos reader_qos;
    };
#pragma keylist transceiverQos group_id transceiver_id partition_id

    struct transponderDef
    {
        unsigned long   group_id;
        unsigned long   transponder_id;
        unsigned long   partition_id;
        unsigned long   topic_id;
        TopicKind       topic_kind;
        SchedulingClass scheduling_class;
        long            thread_priority;
    };
#pragma keylist transponderDef group_id transponder_id partition_id

    struct transponderQos
    {
        unsigned long group_id;
        unsigned long transponder_id;
        unsigned long partition_id;
        DataWriterQos writer_qos;
        DataReaderQos reader_qos;
    };
#pragma keylist transponderQos group_id transponder_id partition_id

    struct writerStatus
    {
        unsigned long deadlines_missed;
    };

    struct readerStatus
    {
        unsigned long samples_lost;
        unsigned long samples_rejected;
        unsigned long deadlines_missed;
    };

    struct transmitterReport
    {
        unsigned long application_id;
        unsigned long transmitter_id;
        unsigned long partition_id;
        unsigned long config_number;
        writerStatus  writer_status;
    };
#pragma keylist transmitterReport application_id transmitter_id partition_id

    struct receiverReport
    {
        unsigned long application_id;
        unsigned long receiver_id;
        unsigned long partition_id;
        unsigned long config_number;
        unsigned long read_bytes_per_second;
        unsigned long read_msgs_per_second;
        readerStatus  reader_status;
    };
#pragma keylist receiverReport application_id receiver_id partition_id

    struct metricsReport
    {
        double        percentile;
        unsigned long sample_count;
        usec_duration minimum;
        usec_duration average;
        usec_duration maximum;
        usec_duration deviation;
    };

    struct transceiverReport
    {
        unsigned long application_id;
        unsigned long transceiver_id;
        unsigned long partition_id;
        unsigned long config_number;
        writerStatus  writer_status;
        readerStatus  reader_status;
        metricsReport inter_arrival_time[4];
        metricsReport send_latency[4];
        metricsReport echo_latency[4];
        metricsReport trip_latency[4];
        metricsReport send_source_latency[4];
        metricsReport send_arrival_latency[4];
        metricsReport send_trip_latency[4];
        metricsReport echo_source_latency[4];
        metricsReport echo_arrival_latency[4];
        metricsReport echo_trip_latency[4];
    };
#pragma keylist transceiverReport application_id transceiver_id partition_id

    struct transponderReport
    {
        unsigned long application_id;
        unsigned long transponder_id;
        unsigned long partition_id;
        unsigned long config_number;
        writerStatus  writer_status;
        readerStatus  reader_status;
    };
#pragma keylist transponderReport application_id transponder_id partition_id

    enum discoveryKind {
        DataWriterDiscovery,
        DataReaderDiscovery
    };

    struct discoveryReport
    {
        unsigned long application_id;
        unsigned long partition_id;
        unsigned long entity_id;
        discoveryKind report_kind;
        unsigned long samples_missed;
        usec_duration discovery_time;
        usec_duration creation_duration;
    };
#pragma keylist discoveryReport application_id entity_id partition_id

    struct errorReport
    {
        unsigned long application_id;
        unsigned long partition_id;
        unsigned long entity_id;
        string<480>   message;
    };
#pragma keylist errorReport application_id entity_id partition_id

    enum commandKind {
        STOP,
        RECORD,
        COMPOSE,
        PLAY,
        REPEAT,
        QUIT
    };

    struct recorderCommand
    {
        unsigned long recorder_id;
        commandKind command;
    };
#pragma keylist recorderCommand recorder_id

    enum stateKind {
        STOPPED,
        RECORDING,
        COMPOSING,
        PLAYING,
        TERMINATED
    };

    struct recorderState
    {
        unsigned long recorder_id;
        stateKind state;
    };
#pragma keylist recorderState recorder_id
};

#if 0
module Creator {

    struct errorReport
    {
        unsigned long node_id;
        unsigned long process_id;
        string<480>   message;
    };
#pragma keylist errorReport node_id

    enum SchedulingClass {
        TIMESHARING, REALTIME
    };

    struct processDef {
        unsigned long   group_id;
        unsigned long   process_id;
        SchedulingClass scheduling_class;
        long            thread_priority;
        string<256>     command;
        string<256>     arguments;
    };
#pragma keylist processDef group_id process_id

    struct processState {
        unsigned long   node_id;
        unsigned long   process_id;
    };
#pragma keylist processState node_id process_id

};

#endif
